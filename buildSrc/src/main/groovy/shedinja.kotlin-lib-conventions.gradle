plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'io.gitlab.arturbosch.detekt'
    id 'com.github.ben-manes.versions'

    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

version = rootProject.version
group = rootProject.group

dependencies {
    implementation libs.kotlin.stdlib

    testImplementation libs.kotlin.test.common
    testImplementation libs.kotlin.test.junit5
    testImplementation libs.junit.jupiterApi
    testRuntimeOnly libs.junit.jupiterEngine

    detektPlugins libs.detekt.formatting
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
}

dokkaHtmlPartial {
    dokkaSourceSets {
        configureEach {
            reportUndocumented.set(true)
            includes.from("module.md")
        }
    }
}

detekt {
    buildUponDefaultConfig = true
    config = files(rootProject.layout.projectDirectory.file("detekt.yaml"))
}

check.configure {
    dependsOn = dependsOn.findAll { it.name != 'detekt' }
    dependsOn += 'detektMain'
    dependsOn += 'detektTest'
}

if (project.version.endsWith('-SNAPSHOT') || project.hasProperty('allowNonSnapshotRelease')) {
    publishing {
        repositories {
            /*
            GPR does not support anonymous access to public packages - this is disabled for now
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/utybo/Shedinja")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
            */

            maven {
                name = "GitLab"
                url = uri("https://gitlab.com/api/v4/projects/29365238/packages/maven")
                credentials(HttpHeaderCredentials) {
                    name = 'Private-Token'
                    value = System.getenv("GITLAB_DEPLOY_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
        publications {
            library(MavenPublication) {
                from(components.java)
            }
        }
    }
} else if (!project.version.endsWith('-SNAPSHOT')) {
    // Security flag: this avoids accidentally publishing a would-be snapshot version via the CI on a main-branch push
    // when the version string was not updated properly.
    // Add -PallowNonSnapshotRelease to the Gradle command line to override this check.
    logger.warn("Publishing non-snapshot version is disabled. Add property 'allowNonSnapshotRelease' to lift this restriction.")
} else {
    // At this point, the version string is a snapshot version, but the project set to a release version.
    // This is typically when the snapshot version string was not updated.
    logger.error("Version string is a snapshot version, but property 'allowNonSnapshotRelease' is present.")
}

// Versions config for the Gradle versions plugin, from the readme
// https://github.com/ben-manes/gradle-versions-plugin
def isNonStable = { String version ->
    def regex = /^[0-9,.v-]+(-r)?$/
    return !(version ==~ regex)
}

dependencyUpdates {
    // Reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
